#!/usr/bin/env php
<?php
// rapulo
// CLI untuk framework Rapulo

class RapuloCLI {
    private $commands = [
        'make:component' => 'createComponent',
        'make:controller' => 'createController',
        'make:model' => 'createModel',
        'make:feature' => 'createFeature',
        'serve' => 'serve',
        'create:project' => 'createProject',
    ];

    public function run(array $argv) {
        if (count($argv) < 2) {
            $this->showHelp();
            exit(1);
        }

        $command = $argv[1];
        if (!isset($this->commands[$command])) {
            echo "Error: Unknown command '$command'\n";
            $this->showHelp();
            exit(1);
        }

        $method = $this->commands[$command];
        $this->$method(array_slice($argv, 2));
    }

    private function showHelp() {
        echo <<<EOT
Rapulo CLI
Available commands:
  create:project <name>            Create a new Rapulo project
  make:component <name> <feature>  Create a new component in the specified feature
  make:controller <name> <feature> Create a new controller in the specified feature
  make:model <name> <feature>      Create a new model in the specified feature
  make:feature <name>              Create a new feature directory
  serve [host:port]                Run the development server (default: localhost:8000)
EOT;
    }

    private function createComponent(array $args) {
        if (count($args) < 2) {
            echo "Error: Please provide component name and feature (e.g., make:component Login Auth)\n";
            exit(1);
        }

        $name = ucfirst($args[0]);
        $feature = ucfirst($args[1]);
        $namespace = "Rapulo\\Features\\$feature";
        $path = "app/Features/$feature";
        $componentPath = "$path/{$name}Component.php";
        $viewPath = "$path/{$name}.view.php";

        if (!is_dir($path)) {
            echo "Error: Feature '$feature' does not exist. Create it with 'make:feature $feature'\n";
            exit(1);
        }

        $componentTemplate = <<<EOT
<?php
namespace $namespace;

use Rapulo\Core\Component;

class {$name}Component extends Component {
    protected function initState() {
        \$this->state = [];
    }

    public function render(): string {
        \$template = __DIR__ . '/{$name}.view.php';
        ob_start();
        extract(\$this->props);
        extract(\$this->state);
        include \$template;
        return ob_get_clean();
    }
}
EOT;

        $viewTemplate = <<<EOT
<div>
    <h1>$name Component</h1>
    <!-- Add your HTML/PHP here -->
</div>
EOT;

        $this->writeFile($componentPath, $componentTemplate);
        $this->writeFile($viewPath, $viewTemplate);
        echo "Component '$name' created in feature '$feature'\n";
    }

    private function createController(array $args) {
        if (count($args) < 2) {
            echo "Error: Please provide controller name and feature (e.g., make:controller Auth Auth)\n";
            exit(1);
        }

        $name = ucfirst($args[0]);
        $feature = ucfirst($args[1]);
        $namespace = "Rapulo\\Features\\$feature";
        $path = "app/Features/$feature";
        $controllerPath = "$path/{$name}Controller.php";

        if (!is_dir($path)) {
            echo "Error: Feature '$feature' does not exist. Create it with 'make:feature $feature'\n";
            exit(1);
        }

        $controllerTemplate = <<<EOT
<?php
namespace $namespace;

class {$name}Controller {
    public function index() {
        return "Welcome to $name Controller";
    }
}
EOT;

        $this->writeFile($controllerPath, $controllerTemplate);
        echo "Controller '$name' created in feature '$feature'\n";
    }

    private function createModel(array $args) {
        if (count($args) < 2) {
            echo "Error: Please provide model name and feature (e.g., make:model User Auth)\n";
            exit(1);
        }

        $name = ucfirst($args[0]);
        $feature = ucfirst($args[1]);
        $namespace = "Rapulo\\Features\\$feature";
        $path = "app/Features/$feature";
        $modelPath = "$path/{$name}Model.php";

        if (!is_dir($path)) {
            echo "Error: Feature '$feature' does not exist. Create it with 'make:feature $feature'\n";
            exit(1);
        }

        $modelTemplate = <<<EOT
<?php
namespace $namespace;

use Rapulo\Core\Database;

class {$name}Model {
    protected \$db;

    public function __construct() {
        \$this->db = new Database();
    }
}
EOT;

        $this->writeFile($modelPath, $modelTemplate);
        echo "Model '$name' created in feature '$feature'\n";
    }

    private function createFeature(array $args) {
        if (count($args) < 1) {
            echo "Error: Please provide feature name (e.g., make:feature Auth)\n";
            exit(1);
        }

        $feature = ucfirst($args[0]);
        $path = "app/Features/$feature";

        if (is_dir($path)) {
            echo "Error: Feature '$feature' already exists\n";
            exit(1);
        }

        mkdir($path, 0755, true);
        echo "Feature '$feature' created\n";
    }

    private function serve(array $args) {
        $hostPort = $args[0] ?? 'localhost:8000';
        if (!is_dir('public')) {
            echo "Error: 'public' directory not found. Ensure you are in a Rapulo project directory.\n";
            exit(1);
        }

        echo "Starting Rapulo development server at http://$hostPort\n";
        exec("php -S $hostPort -t public");
    }

    private function createProject(array $args) {
        if (count($args) < 1) {
            echo "Error: Please provide project name (e.g., create:project my-app)\n";
            exit(1);
        }

        $projectName = $args[0];
        $projectDir = getcwd() . '/' . $projectName;

        if (is_dir($projectDir)) {
            echo "Error: Directory '$projectName' already exists\n";
            exit(1);
        }

        // Buat struktur direktori
        $dirs = [
            "$projectDir/app/Core",
            "$projectDir/app/Features/Auth",
            "$projectDir/app/Config",
            "$projectDir/public/assets",
            "$projectDir/resources/views",
            "$projectDir/resources/styles",
            "$projectDir/routes",
        ];
        foreach ($dirs as $dir) {
            mkdir($dir, 0755, true);
        }

        // Buat file-file dasar
        $files = [
            'composer.json' => <<<EOT
{
    "name": "rapulo/$projectName",
    "version": "1.0.0",
    "autoload": {
        "psr-4": {
            "Rapulo\\\\": "app/"
        }
    },
    "require": {}
}
EOT,
            'public/index.php' => <<<EOT
<?php
require __DIR__ . '/../vendor/autoload.php';

\$config = require __DIR__ . '/../app/Config/app.php';
\$router = new Rapulo\Core\Router();

require __DIR__ . '/../routes/web.php';
require __DIR__ . '/../routes/api.php';

if (isset(\$_GET['debug_routes'])) {
    header('Content-Type: text/plain');
    echo print_r(\$router->getRoutes(), true);
    exit;
}

\$method = \$_SERVER['REQUEST_METHOD'];
\$uri = rtrim(parse_url(\$_SERVER['REQUEST_URI'], PHP_URL_PATH), '/');
echo \$router->dispatch(\$method, \$uri);
EOT,
            'app/Config/app.php' => <<<EOT
<?php
return [
    'name' => 'Rapulo',
    'url' => 'http://localhost:8000',
    'debug' => true,
];
EOT,
            'app/Config/database.php' => <<<EOT
<?php
return [
    'driver' => 'mysql',
    'host' => 'localhost',
    'database' => '$projectName',
    'username' => 'root',
    'password' => '',
    'charset' => 'utf8mb4',
];
EOT,
            'app/Core/Component.php' => <<<EOT
<?php
namespace Rapulo\Core;

abstract class Component {
    protected \$props = [];
    protected \$state = [];

    public function __construct(array \$props = []) {
        \$this->props = \$props;
        \$this->initState();
    }

    protected function initState() {
        \$this->state = [];
    }

    public function setState(array \$newState) {
        \$this->state = array_merge(\$this->state, \$newState);
    }

    abstract public function render(): string;
}
EOT,
            'app/Core/Router.php' => <<<EOT
<?php
namespace Rapulo\Core;

class Router {
    protected \$routes = ['GET' => [], 'POST' => []];

    public function get(\$uri, \$handler) {
        \$this->routes['GET'][rtrim(\$uri, '/')] = \$handler;
    }

    public function post(\$uri, \$handler) {
        \$this->routes['POST'][rtrim(\$uri, '/')] = \$handler;
    }

    public function dispatch(\$method, \$uri) {
        \$uri = rtrim(\$uri, '/');
        if (isset(\$this->routes[\$method][\$uri])) {
            \$handler = \$this->routes[\$method][\$uri];
            if (is_callable(\$handler)) {
                return \$handler();
            } elseif (is_array(\$handler)) {
                [\$controller, \$method] = \$handler;
                \$controller = new \$controller();
                return \$controller->\$method();
            }
        }
        http_response_code(404);
        return '404 Not Found';
    }

    public function getRoutes() {
        return \$this->routes;
    }
}
EOT,
            'app/Core/Database.php' => <<<EOT
<?php
namespace Rapulo\Core;

class Database {
    protected \$pdo;

    public function __construct() {
        \$config = require __DIR__ . '/../Config/database.php';
        \$dsn = "{\$config['driver']}:host={\$config['host']};dbname={\$config['database']};charset={\$config['charset']}";
        \$this->pdo = new \\PDO(\$dsn, \$config['username'], \$config['password']);
        \$this->pdo->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION);
    }

    public function query(\$sql, \$params = []) {
        \$stmt = \$this->pdo->prepare(\$sql);
        \$stmt->execute(\$params);
        return \$stmt->fetchAll(\\PDO::FETCH_ASSOC);
    }
}
EOT,
            'app/Features/Auth/LoginComponent.php' => <<<EOT
<?php
namespace Rapulo\Features\Auth;

use Rapulo\Core\Component;

class LoginComponent extends Component {
    protected function initState() {
        \$this->state = ['error' => ''];
    }

    public function render(): string {
        \$template = __DIR__ . '/Login.view.php';
        ob_start();
        extract(\$this->props);
        extract(\$this->state);
        include \$template;
        return ob_get_clean();
    }
}
EOT,
            'app/Features/Auth/Login.view.php' => <<<EOT
<div>
    <?php if (\$error): ?>
        <p style="color: red;"><?php echo htmlspecialchars(\$error); ?></p>
    <?php endif; ?>
    <form method="POST" action="/auth/login">
        <input type="text" name="username" placeholder="Username" value="<?php echo htmlspecialchars(\$username ?? ''); ?>">
        <input type="password" name="password" placeholder="Password">
        <button type="submit">Login</button>
    </form>
</div>
EOT,
            'app/Features/Auth/AuthController.php' => <<<EOT
<?php
namespace Rapulo\Features\Auth;

class AuthController {
    public function showLogin() {
        \$component = new LoginComponent(['username' => '']);
        return \$component->render();
    }

    public function login() {
        \$username = \$_POST['username'] ?? '';
        \$password = \$_POST['password'] ?? '';

        if (\$username === 'admin' && \$password === 'password') {
            header('Location: /dashboard');
            exit;
        }

        \$component = new LoginComponent(['username' => \$username]);
        \$component->setState(['error' => 'Invalid credentials']);
        return \$component->render();
    }
}
EOT,
            'routes/web.php' => <<<EOT
<?php
use Rapulo\Features\Auth\AuthController;

\$router->get('/login', [AuthController::class, 'showLogin']);
\$router->post('/auth/login', [AuthController::class, 'login']);
EOT,
            'routes/api.php' => <<<EOT
<?php
// Tambahkan rute API di sini
EOT,
            'rapulo' => file_get_contents(__FILE__), // Salin CLI itu sendiri
        ];

        foreach ($files as $path => $content) {
            $this->writeFile("$projectDir/$path", $content);
        }

        // Berikan izin eksekusi untuk CLI
        chmod("$projectDir/rapulo", 0755);

        // Inisialisasi Composer
        chdir($projectDir);
        exec('composer install');

        echo "Rapulo project '$projectName' created successfully!\n";
        echo "To start the project:\n";
        echo "  cd $projectName\n";
        echo "  php rapulo serve\n";
    }

    private function writeFile($path, $content) {
        if (file_exists($path)) {
            echo "Error: File '$path' already exists\n";
            exit(1);
        }
        file_put_contents($path, $content);
    }
}

$cli = new RapuloCLI();
$cli->run($argv);
?>